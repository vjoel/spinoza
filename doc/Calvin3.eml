Delivered-To: joelvanderwerf@gmail.com
Received: by 10.220.71.202 with SMTP id i10csp55485vcj;
        Thu, 10 Apr 2014 14:32:28 -0700 (PDT)
Return-Path: <alexander.thomson@gmail.com>
Received-SPF: pass (google.com: domain of alexander.thomson@gmail.com designates 10.60.57.164 as permitted sender) client-ip=10.60.57.164
Authentication-Results: mr.google.com;
       spf=pass (google.com: domain of alexander.thomson@gmail.com designates 10.60.57.164 as permitted sender) smtp.mail=alexander.thomson@gmail.com;
       dkim=pass header.i=@gmail.com
X-Received: from mr.google.com ([10.60.57.164])
        by 10.60.57.164 with SMTP id j4mr11654785oeq.24.1397165547976 (num_hops = 1);
        Thu, 10 Apr 2014 14:32:27 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        bh=lZ+ueo82xywRYsfcziMFCs2DoIxkYW6/orTaQjcS1z8=;
        b=s18vm3RpJ+e+Gq7UjsbX0TFLdxwqj4SF0t8dI52f98vZXb0meKrQPpxNJGGSEiuABU
         CH8SSUqDqu677d3G8WGvB6DfUPAKF01mk9ca/pIXv0wDhfjQ/DiD240xlptTY3HUqys2
         Fx3XsWkkffDRm0xC2suiTcCgqC7SU3wrXgq2IA005YnpniyECrkXtVlClMb1KYiIvq0i
         65sgefDhQxVj2H8fNB4BP+baLwZ+Pdif9GjYcKj65Rx1lTlEDUb43TQtabtoa69UD6pX
         5TvWVd6HdkW0CexmsIjkAdyvz0EbUPjxYXnE98nojzMS2uz5BODobRFgHPOOATam4nA8
         R+cQ==
MIME-Version: 1.0
X-Received: by 10.60.57.164 with SMTP id j4mr11654785oeq.24.1397165547967;
 Thu, 10 Apr 2014 14:32:27 -0700 (PDT)
Received: by 10.76.84.161 with HTTP; Thu, 10 Apr 2014 14:32:27 -0700 (PDT)
In-Reply-To: <5346F44B.10900@gmail.com>
References: <52C1DD3D.2040207@gmail.com>
	<CAOBF0rKKCwEucLmJMQoO8TKshYTgs1SwS1tO9hK1dktDsDWr7w@mail.gmail.com>
	<52D032AC.2080702@gmail.com>
	<CAOBF0r+yJu1x=O3bJgeEaj5uvVMNmdTgW-x6mDqg6DpYz_NabQ@mail.gmail.com>
	<5320FFC5.4050208@gmail.com>
	<CAOBF0rLM4-8OASA2vpoyvSH8LWdJTOeHfEzVsbd4Egs+-v7FWQ@mail.gmail.com>
	<5345E65D.30308@gmail.com>
	<CAOBF0rKm+zztupux6RWEx1t+eUzFybTif7kOKJHbDwm6ismXXw@mail.gmail.com>
	<5346F44B.10900@gmail.com>
Date: Thu, 10 Apr 2014 17:32:27 -0400
Message-ID: <CAOBF0rLAmQXK9XZVEo2krhFXKZRtLq5T67Dj5kjH_PAVtZLKAw@mail.gmail.com>
Subject: Re: Calvin
From: Alexander Thomson <alexander.thomson@gmail.com>
To: Joel VanderWerf <joelvanderwerf@gmail.com>
Content-Type: multipart/alternative; boundary=089e013d0ce82de97b04f6b6f434

--089e013d0ce82de97b04f6b6f434
Content-Type: text/plain; charset=UTF-8

On Thu, Apr 10, 2014 at 3:43 PM, Joel VanderWerf
<joelvanderwerf@gmail.com>wrote:

> On 04/10/2014 06:01 AM, Alexander Thomson wrote:
>
>> On Wed, Apr 9, 2014 at 8:31 PM, Joel VanderWerf
>> <joelvanderwerf@gmail.com <mailto:joelvanderwerf@gmail.com>> wrote:
>>
>>
>>     Alex,
>>
>>     I'm trying to sum up the difference between Calvin's commit
>>     agreement protocol and 2PC:
>>
>>     Without determinism, commit agreement is an operational decision.
>>     Each node has its own view of the database state, possibly differing
>>     from the view at any other node, even if they replicate the same
>>     partitions. A node's agreement means that it is capable of
>>     proceeding with the transaction, if the coordinator decides to do
>>     so. When the coordinator receives agreement from all nodes, it
>>     instructs them to commit.
>>
>>
>> Correct. To be a bit more precise, a node's "agreement" in the context
>> of 2PC is its ack of the leader's prepare message; this specifically
>> means that the effects of the transaction (but not the commit decision)
>> are durably written to the node's write-ahead log. But there are two
>> dimensions of distributed agreement: 2PC across all partitions
>> participating in a transaction, and a replication protocol across all
>> copies of each partition. According to the OSDI paper, for example,
>> Spanner replicates each node's write-ahead log via Paxos. This means
>> that each 2PC participant actually has to forge a Paxos concensus before
>> even acking the prepare message (and then again when the leader sends
>> the commit instruction).
>>
>
> Ah. So, restating what you have said, maybe we can look at it this way.
>
> Another benefit of Calvin is that the need for Paxos consensus shifts to
> an earlier point in the pipeline, where its performance impact is less (or
> can be lessened).
>
> Also, consensus plays a different role. The content of the Calvin
> consensus request is smaller: batch GUID, appended in sequence, rather than
> the details of the transaction. Calvin does write the full transaction
> details to some other store, but that can be eventually consistent, with
> higher write performance than Paxos.
>
> The pipeline shift matters as follows:
>
> With Calvin, consensus is required for appending to the txn request log
> (establishing the predefined sequence that is essential for determinism),
> before anything has been sent to execution/storage nodes. (Exception: maybe
> some cache-warming hints have been sent.) The key point is that execution
> nodes are not involved in this consensus request. By the time they see the
> transaction, they can assume that transactions are globally linearly
> ordered. The only further coordination (and hence the only impact on
> contention footprint) that they need is the peer-to-peer sharing of read
> results of the transaction with other partitions. The order assumption plus
> the sharing is sufficient to maintain the invariant: consistency across
> replicas.
>

Correct.


>
> With 2PC, consensus on the contents of the proposed transaction is
> required in the proposal phase, and it must be consensus across all nodes
> that would execute the txn. (Plus, as you pointed out, an additional
> consensus step is needed later.)
>
> At the earlier point in the pipeline, it is possible to bundle many
> transactions into one consensus request, increasing throughput. Batching
> would not be possible in 2pc's use of paxos.


You can batch commit multiple transactions that happen to finish at the
same time in a nondeterministic system w/ 2PC---they just have to be
non-conflicting transactions, since each has to be holding its locks during
the commit process.


> Plus there is the effect of Paxos latency on contention footprint while
> 2pc holds locks, as mentioned in your paper.
>

> Stepping back a bit to look at the bigger picture, here's a question: do
> you see Calvin as having much in common with virtual synchrony? (I'd like
> to learn more about the latter, but the papers have been too vague for me.)
>

If I recall correctly, virtual synchrony was a failed attempt at inventing
Paxos in the 80s.


> Thanks, this is helpful!
>
> Joel
>
>

--089e013d0ce82de97b04f6b6f434
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div class=3D"gmail_extra"><div class=3D"gmail_quote">On T=
hu, Apr 10, 2014 at 3:43 PM, Joel VanderWerf <span dir=3D"ltr">&lt;<a href=
=3D"mailto:joelvanderwerf@gmail.com" target=3D"_blank">joelvanderwerf@gmail=
.com</a>&gt;</span> wrote:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-=
left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;p=
adding-left:1ex"><div>On 04/10/2014 06:01 AM, Alexander Thomson wrote:<br>

</div><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;b=
order-left-width:1px;border-left-color:rgb(204,204,204);border-left-style:s=
olid;padding-left:1ex"><div>
On Wed, Apr 9, 2014 at 8:31 PM, Joel VanderWerf<br></div><div>
&lt;<a href=3D"mailto:joelvanderwerf@gmail.com" target=3D"_blank">joelvande=
rwerf@gmail.com</a> &lt;mailto:<a href=3D"mailto:joelvanderwerf@gmail.com" =
target=3D"_blank">joelvanderwerf@gmail.<u></u>com</a>&gt;&gt; wrote:<br>
<br>
<br>
=C2=A0 =C2=A0 Alex,<br>
<br>
=C2=A0 =C2=A0 I&#39;m trying to sum up the difference between Calvin&#39;s =
commit<br>
=C2=A0 =C2=A0 agreement protocol and 2PC:<br>
<br>
=C2=A0 =C2=A0 Without determinism, commit agreement is an operational decis=
ion.<br>
=C2=A0 =C2=A0 Each node has its own view of the database state, possibly di=
ffering<br>
=C2=A0 =C2=A0 from the view at any other node, even if they replicate the s=
ame<br>
=C2=A0 =C2=A0 partitions. A node&#39;s agreement means that it is capable o=
f<br>
=C2=A0 =C2=A0 proceeding with the transaction, if the coordinator decides t=
o do<br>
=C2=A0 =C2=A0 so. When the coordinator receives agreement from all nodes, i=
t<br>
=C2=A0 =C2=A0 instructs them to commit.<br>
<br>
<br>
Correct. To be a bit more precise, a node&#39;s &quot;agreement&quot; in th=
e context<br>
of 2PC is its ack of the leader&#39;s prepare message; this specifically<br=
>
means that the effects of the transaction (but not the commit decision)<br>
are durably written to the node&#39;s write-ahead log. But there are two<br=
>
dimensions of distributed agreement: 2PC across all partitions<br>
participating in a transaction, and a replication protocol across all<br>
copies of each partition. According to the OSDI paper, for example,<br>
Spanner replicates each node&#39;s write-ahead log via Paxos. This means<br=
>
that each 2PC participant actually has to forge a Paxos concensus before<br=
>
even acking the prepare message (and then again when the leader sends<br>
the commit instruction).<br>
</div></blockquote>
<br>
Ah. So, restating what you have said, maybe we can look at it this way.<br>
<br>
Another benefit of Calvin is that the need for Paxos consensus shifts to an=
 earlier point in the pipeline, where its performance impact is less (or ca=
n be lessened).<br>
<br>
Also, consensus plays a different role. The content of the Calvin consensus=
 request is smaller: batch GUID, appended in sequence, rather than the deta=
ils of the transaction. Calvin does write the full transaction details to s=
ome other store, but that can be eventually consistent, with higher write p=
erformance than Paxos.<br>


<br>
The pipeline shift matters as follows:<br>
<br>
With Calvin, consensus is required for appending to the txn request log (es=
tablishing the predefined sequence that is essential for determinism), befo=
re anything has been sent to execution/storage nodes. (Exception: maybe som=
e cache-warming hints have been sent.) The key point is that execution node=
s are not involved in this consensus request. By the time they see the tran=
saction, they can assume that transactions are globally linearly ordered. T=
he only further coordination (and hence the only impact on contention footp=
rint) that they need is the peer-to-peer sharing of read results of the tra=
nsaction with other partitions. The order assumption plus the sharing is su=
fficient to maintain the invariant: consistency across replicas.<br>
</blockquote><div><br></div><div>Correct.</div><div>=C2=A0</div><blockquote=
 class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left-width:=
1px;border-left-color:rgb(204,204,204);border-left-style:solid;padding-left=
:1ex">


<br>
With 2PC, consensus on the contents of the proposed transaction is required=
 in the proposal phase, and it must be consensus across all nodes that woul=
d execute the txn. (Plus, as you pointed out, an additional consensus step =
is needed later.)<br>


<br>
At the earlier point in the pipeline, it is possible to bundle many transac=
tions into one consensus request, increasing throughput. Batching would not=
 be possible in 2pc&#39;s use of paxos.</blockquote><div><br></div><div>
You can batch commit multiple transactions that happen to finish at the sam=
e time in a nondeterministic system w/ 2PC---they just have to be non-confl=
icting transactions, since each has to be holding its locks during the comm=
it process.</div>
<div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px =
0px 0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204);border-l=
eft-style:solid;padding-left:1ex">Plus there is the effect of Paxos latency=
 on contention footprint while 2pc holds locks, as mentioned in your paper.=
<br>

</blockquote><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px =
0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204);border-left-=
style:solid;padding-left:1ex"><br>
Stepping back a bit to look at the bigger picture, here&#39;s a question: d=
o you see Calvin as having much in common with virtual synchrony? (I&#39;d =
like to learn more about the latter, but the papers have been too vague for=
 me.)<br>
</blockquote><div><br></div><div>If I recall correctly, virtual synchrony w=
as a failed attempt at inventing Paxos in the 80s.</div><div><br></div><blo=
ckquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left=
-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;paddi=
ng-left:1ex">


<br>
Thanks, this is helpful!<span><font color=3D"#888888"><br>
<br>
Joel<br>
<br>
</font></span></blockquote></div><br></div></div>

--089e013d0ce82de97b04f6b6f434--
