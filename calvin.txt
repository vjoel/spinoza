is this right?
  interval in which locks are held at a node is disjoint from
    interval in which waiting for response?

-------------

how can cross-partition transactions work?

bottleneck? spof?

compare calvin with

  virtual synchrony and works by ...
  
  sinfonia
  
  split-brain?

possible to implement a toy version of calvin in ruby?

what are the tradeoffs?

who is using it? why/why not?


papers
  Modularity and Scalability in Calvin,
    IEEE 2013
  Calvin: Fast Distributed Transactions for Partitioned Database Systems,
    SIGMOD 2012
  Consistency Tradeoffs in Modern Distributed Database System Design
    Abadi, 2012
  The Case for Determinism in Database Systems, VLDB 2010
  Lightweight Locking for Main Memory Database Systems, VLDB, 2012


focus on one configuration:
  serial scheduler, OCC transactions, and memory store.

--

Questions on the 2013 IEEE paper:

p.2 'determinism' is really about same succeed/fail result in each process that execs the txn, right?

does calvin use anything like atomic multicast?

is txn reordering the same at all nodes? deterministic?

are txns specified as full sql? (depends on backend -- see 2.2)

latency effect of Paxos-replicated log? (but good throughput, right?)

p.4, 2.1.1(b), wtf?

p.5 explain the two locking schedulers
  any real-world comparison among the three schedulers?
  
p.5 sec 3: "development-intensive" for the Calvin developer/integrator or for app dev?

p.6 "Optimistic Client-side Transactions": (like tupelo, but different)
  * can abort happen before commit? (e.g., a row that was read becomes invalid)
  * how do reads even work?

consider using LMDB over LevelDB for faster read / prefectch?


----------
presentation

ACID --> ACID + deterministic txn order/exec

maintain invariant from n to n+1 step evolution of system --> benefits
  invariant: transactions exec in order logged; succeed/fail deterministically
  benefits:
    ...

PACELC (?) rather than CAP

focus on one remarkable use case, choice in each of the dimensions
  serial scheduler, like H-Cal (H-Store / VoltDB)
  OCC txns
  in memory
